<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F20%2F%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[数组数组的概念 数组就是将多个元素（通常是同一类型）按一定顺序排列放到一个集合中，称这个集合为数组。 数组的定义 数组是一个有序（指的是数组的下标）的列表，可以在数组中存放任意的数据，并且数组的长度可以动态的调整。 遍历数组 遍历：遍及所有，对数组的每一个元素都访问一次就叫遍历。 数组遍历的基本语法： 123for(var i = 0; i &lt; arr.length; i++) &#123; // 数组遍历的固定结构&#125; 案例： 123456789101112131415161718192021222324252627282930313233343536// 求一组数中的最大值和最小值，以及所在位置var arr = [1, -4, 7, 3, 5];var max = arr[0];var min = arr[0];var pos_max = 0, pos_min = 0;for (var i = 0; i &lt; arr.length; i++) &#123; if (arr[i] &gt; max) &#123; max = arr[i]; pos_max = i; &#125; else if (arr[i] &lt; min) &#123; min = arr[i]; pos_min = i; &#125;&#125;console.log('max: ' + max + ' pos_max: ' + pos_max, 'min: ' + min + ' pos_min:' + pos_min);//冒泡排序，从小到大var arr = [1, 4, 7, 3, 5];for (var i = 0; i &lt; arr.length - 1; i++) &#123; for (var j = 0; j &lt; arr.length - 1; j++) &#123; if (arr[j] &gt; arr[j + 1]) &#123; var temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; &#125; &#125;&#125;console.log(arr);// 翻转数组var arr = [1, 2, 3, 4, 5];for (var i = 0; i &lt; arr.length / 2; i++) &#123; var temp = arr[i]; arr[i] = arr[arr.length - 1 - i]; arr[arr.length - 1 - i] = temp;&#125;console.log(arr);]]></content>
  </entry>
  <entry>
    <title><![CDATA[运算符]]></title>
    <url>%2F2019%2F02%2F18%2F%E8%BF%90%E7%AE%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[算数运算符、自增自减运算符、逻辑运算符（布尔运算符）、关系运算符（比较运算符）、赋值运算符 算数运算符1+ - * / % 自增自减运算符一元运算符：只有一个操作数的运算符，自增自减运算符属于一元运算符。 ++ 自身加1 – 自身减1 前置++ 12345var num1 = 5;++num1; // 相当于：num1 = num1 + 1;var num2 = 6;console.log(num1 + ++num2); //输出13，且num2为7 后置++ 1234var num1 = 5;num1++; // 相当于 num1 = num1 + 1;var num2 = 6 console.log(num1 + num2++); //输出12，且num2为7 逻辑运算符（布尔运算符）123&amp;&amp; 与 两个操作数同时为true，结果为true，否则都是false|| 或 两个操作数有一个为true，结果为true，否则为false! 非 取反 关系运算符(比较运算符)1&lt; &gt; &gt;= &lt;= == != === !== 12345==与===的区别：==只进行值的比较（可能会发生类型转换），===要求类型和值都一样，则是相等var result = '55' == 55; // truevar result = '55' === 55; // false 值相等，类型不相等var result = 55 === 55; // true 赋值运算符1= += -= *= /= %= 运算符的优先级123456789101112131415优先级从高到底 1. () 优先级最高 2. 一元运算符 ++ -- ! 3. 算术运算符 先* / % 后 + - 4. 大小比较运算符 &gt; &gt;= &lt; &lt;= 5. 相等比较运算符 == != === !== 6. 逻辑运算符 先 &amp;&amp; 后 || 7. 赋值运算符 运算符优先级不用死记硬背，用的多了自然就知道执行顺序了。大致可以记一下这几条规则：1. 括号最优先2. 一元运算符紧随其后3. 先乘除后加减4. 算术运算符 &gt; 比较运算符 &gt; 逻辑运算符5. 赋值运算符最落后]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript 基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[表达式和语句]]></title>
    <url>%2F2019%2F02%2F18%2F%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[表达式 一个表达式可以产生一个值，有可能是运算、函数调用、有可能是字面量。表达式可以放在任何需要值的地方。 语句 语句可以理解为一个行为，循环语句和判断语句就是典型的语句。一个程序有很多个语句组成，一般情况下，使用英文分号（;）分割一个一个的语句 流程控制 程序的三种基本结构 顺序结构从上到下执行的代码就是顺序结构 循环结构循环结构：重复做一件事情 有多种循环结构的语句。 分支结构if语句单分支结构 123if (/* 条件表达式 */) &#123; // 执行语句&#125; 双分支结构 12345if (/* 条件表达式 */)&#123; // 成立执行语句&#125; else &#123; // 否则执行语句&#125; 多分支结构 123456789if (/* 条件1 */)&#123; // 成立执行语句&#125; else if (/* 条件2 */)&#123; // 成立执行语句&#125; else if (/* 条件3 */)&#123; // 成立执行语句&#125; else &#123; // 最后默认执行语句&#125; 案例 ： 123456789101112131415161718192021222324252627// 求两个数中的最大值var a = prompt("第一个值");var b = prompt("第二个值");if (a &gt; b) &#123; console.log(a);&#125; else &#123; console.log(b);&#125;//判断一个整数是偶数还是奇数var a = 7;if (a % 2 == 0) &#123; console.log("偶数");&#125; else &#123; console.log("奇数");&#125;//判断一个年份是闰年还是平年n = 10;var s = n++ + n++;console.log(s, n);var year = parseInt(prompt('请输入年份'));if (typeof year != Number) &#123; document.write("请输入正确的年份");&#125; else if (year % 4 == 0 &amp;&amp; year % 100 != 1 || year % 400 == 0) &#123; document.write("闰年");&#125; else &#123; document.write("平年");&#125; 三元运算符1234567表达式1 ? 表达式2 : 表达式3是对if……else语句的一种简化写法案例：// 判断一个人的年龄是否满18岁(是否成年)var age = parseInt(prompt("input"));var r = age &gt;= 18 ? "成年且年龄为:" + age : "暂未成年";document.write(r); switch语句语法格式： 123456789101112131415161718switch (表达式) &#123; //这里表达式往往就是一个变量，当然也可以是一个常见的具有运算符的表达式 case 常量1: 语句; break; case 常量2: 语句; break; case 常量3: 语句; break; … case 常量n: 语句; break; default: 语句; break;&#125; 12break可以省略，如果省略，代码会继续执行下一个caseswitch语句在比较值时使用的是全等（===）运算符，因此不会发生类型转换。 案例： 123456789101112131415161718192021222324252627//素质教育（把分数变成ABCDE）var score = prompt("请输入");var s = parseInt(score / 10);if (isNaN(s)) &#123; document.write("数据错误");&#125; else &#123; switch (s) &#123; case 10: case 9: document.write("A"); break; case 8: document.write("B"); break; case 7: document.write("C"); break; case 6: document.write("D"); break; case 5: document.writeg("E"); break; default: document.write('不及格'); break; &#125; 布尔类型的隐式转换 流程控制语句会把后面的值隐式转换成布尔类型 12转换结果为false： 空字符串 0 NaN undefined null false转换结果为true ： 除了上述几个值的其他所有数据 循环结构 在JavaScript中，循环语句有三种，while、do..while、for循环。 while语句基本语法： 12345// 当循环条件为true时，执行循环体，// 当循环条件为false时，结束循环。while (循环条件) &#123; //循环体&#125; do…while语句 do..while循环和while循环非常像，二者经常可以相互替代，但是do..while的特点是不管条件成不成立，都会执行一次。 基础语法： 123do &#123; // 循环体;&#125; while (循环条件); 案例： 123456求100以内所有3的倍数的和使用do-while循环：输出询问"我爱你，嫁给我吧？"，选择"你喜欢我吗？(y/n):"，如果输入为y则打印"我们形影不离"，若输入为n,则继续询问. do &#123; var answer = prompt("你喜欢我吗？");&#125; while (answer != 'y');document.write('我们形影不离'); for语句 while和do…while一般用来解决无法确认次数的循环。for循环一般在循环次数确定的时候比较方便 for循环语法： 1234// for循环的表达式之间用的是;号分隔的，千万不要写成,for (初始化表达式1; 判断表达式2; 自增表达式3) &#123; // 循环体4&#125; 案例： 1234567for (var i = 1; i &lt;= 9; i++) &#123; for (var j = 1; j &lt;= i; j++) &#123; var k = i * j; document.write(i + '* ' + j + "=" + k + '\t'); &#125; document.write('&lt;br&gt;');&#125; continue和break break:立即跳出整个循环，即循环结束，开始执行循环后面的内容（直接跳到大括号） continue:立即跳出当前循环，继续下一次循环（跳到i++的地方） 案例： 123456789101112131415161718192021222324252627282930313233343536373839// 求200-300之间第一个能被7整数的数（break）for (var i = 200; i &lt; 300; i++) &#123; if (i % 7 == 0) &#123; document.write(i); break; &#125;&#125;// capital本金10000元存入银行，年利率是千分之三，// 每过1年，将本金和利息相加作为新的本金。// 计算5年后，获得的本金是多少？// var capital = prompt('输入本金');var capital = 10000;var year = 5;var s;for (var i = 1; i &lt;= year; i++) &#123; s = (capital * (3 / 1000) + capital) * year; document.write(s); break;&#125;// 求第n个斐波那契数，(1，1，2，3，5，8，13，21)var n = window.prompt('请输入第几位');if (n &lt;= 0) &#123; console.log('输入错误');&#125; else &#123; var n1 = 1, n2 = 1, n3; if (n &lt;= 2) &#123; console.log(1); &#125; else &#123; for (var i = 2; i &lt; n; i++) &#123; n3 = n1 + n2; n1 = n2; n2 = n3; &#125; console.log(n3); &#125;&#125;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[清除浮动的几种方法]]></title>
    <url>%2F2019%2F02%2F18%2F%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E9%9B%86%E4%B8%AD%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[浮动对页面的影响： 如果一个父盒子中有一个子盒子，并且父盒子没有设置高，子盒子在父盒子中进行了浮动，那么将来父盒子的高度为0.由于父盒子的高度为0，下面的元素会自动补位，所以这个时候要进行浮动的清除。 关于清除浮动的方式: 方式一: 使用overflow属性来清除浮动 123.ovh&#123; overflow:hidden; &#125; 先找到浮动盒子的父元素，再在父元素中添加一个属性：overflow:hidden,就是清除这个父元素中的子元素浮动对页面的影响. 注意：一般情况下也不会使用这种方式，因为overflow:hidden有一个特点，离开了这个元素所在的区域以后会被隐藏（overflow:hidden会将超出的部分隐藏起来）. 方式二:使用额外标签法 123.clear&#123; clear:both; &#125; 在浮动的盒子之下再放一个标签，在这个标签中使用clear:both，来清除浮动对页面的影响. a.内部标签：会将这个浮动盒子的父盒子高度重新撑开. b.外部标签：会将这个浮动盒子的影响清除，但是不会撑开父盒子. 注意：一般情况下不会使用这一种方式来清除浮动。因为这种清除浮动的方式会增加页面的标签，造成结构的混乱. 方法三:使用伪元素来清除浮动(after意思:后来,以后) 123456789101112.clearfix:after&#123; content:&quot;&quot;; height:0; line-height:0; display:block; visibility:hidden; clear:both; &#125;.clearfix&#123; zoom:1;为了兼容IE&#125; 方法四:使用双伪元素清除浮动 123456789.clearfix:before,.clearfix:after &#123; content: &quot;&quot;; display: block; clear: both;&#125;.clearfix &#123; zoom: 1;&#125; 总结: 第一种方法会将超出部分隐藏在某些时候我们想清除浮动并且保留超出部分时做不到; 第二种方法会增加许多不必要的标签,所以我们尽量使用第三种方法来清除浮动. 为什么不选择第四种方法呢?因为第四种是第三种的改良版虽然比较简便,但是不严谨!]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[布局常用盒子居中方法]]></title>
    <url>%2F2019%2F02%2F18%2F%E5%B8%83%E5%B1%80%E5%B8%B8%E7%94%A8%E7%9B%92%E5%AD%90%E5%B1%85%E4%B8%AD%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[以下样式中的html均为下图所示 123&lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;&lt;/div&gt; 负margin居中 1234567891011121314151617.father &#123; position: relative; width: 200px; height: 150px; background-color: #ddd; margin: 100px auto; &#125; .son &#123; position: absolute; top: 50%; left: 50%; margin-top: -25px; margin-left: -25px; width: 50px; height: 50px; background-color: #f00; &#125; 绝对定位居中 123456789101112131415161718.farter &#123; position: relative; width: 200px; height: 200px; background-color: #cccccc; margin: 50px auto;&#125;.son &#123; position: absolute; top: 0; right: 0; bottom: 0; left: 0; margin: auto; width: 100px; height: 100px; background-color: #00ff00;&#125; transform居中 12345678910111213141516.father &#123; position: relative; width: 200px; height: 200px; background-color: #ddd; margin: 50px auto;&#125; .son &#123; position: absolute; width: 50px; height: 50px; background-color: #0f0; top: 50%; left: 50%; transform: translate(-50%, -50%);&#125; flex居中 1234567891011121314.farter &#123; display: flex; justify-content: center; align-items: center; width: 200px; height: 200px; background-color: #ddd; margin: 50px auto;&#125;.son &#123; width: 100px; height: 100px; background-color: #00ff00;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[数据类型及转换]]></title>
    <url>%2F2019%2F02%2F18%2F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[简单数据类型number、string、boolean、undefined、null number(数值)类型 数值判断 NaN： 是这三个单词的缩写：Not a Number，表示“不是一个数字” NaN与任何值都不相等，包括它本身 isNaN（）：是is Not a Number，用来判断一个数据“是否不是一个数字”。 string（字符串）类型 字符串拼接 使用 + 号连接 两边只要有一个是字符串，那么 + 就是字符串拼接功能 两边如果都是数字，那么 + 就是算术运算的相加功能 boolean（布尔）类型 字面量：true和false，区分大小写 计算机内部储存：true为1，false为0 null（空）类型 null类型表示一个变量的值是一个特殊的“空值”（null） null类型有且只有一个数据：null null值需要明确给以赋值，类似：var object = null；否则如果没有赋值，就是undefined undefined（未定义）类型获取变量的类型​ typeof关键字可以获取变量的类型 数据类型转换转换成字符串类型 toString（） 12var num = 5；console.log(num.toString()); string() 1String()函数存在的意义：有些值没有toString()，这个时候可以使用String()。比如：undefined和null 拼接字符串方式 num + “”，当 + 两边一个操作符是字符串类型，一个操作符是其他类型的时候，会先把其他类型转换成字符串再进行字符串拼接，返回字符串 转换成数值类型 Number() 1Number（）可以把任意值转换成数值，如果要转换的字符串中有一个不是数值的字符，返回NaN parseInt（） 1234var num1 = parseInt('12.7abc');//返回12，如果第一个字符是数字会解析直到遇到非数字结束var num1 = parseInt('abc12.7');//返回NaN，如果第一个字符不是数字或者符号就返回NaN parseFloat（） 12parseFloat()把字符串转换成浮点数parseFloat()和parseInt非常相似，不同之处在于parseFloat会解析第一个. 遇到第二个.或者非数字结束；如果解析的内容里只有整数，解析成整数 +, -0等运算 1234var str = '500';console.log(+str); // 取正console.log(-str); // 取负console.log(str - 0); 转换成布尔类型 Boolean（） 任何数据都可以转换布尔类型 注意：只有 0 、“”（空字符串）、null、undefined、NaN这五个会转换成false，其他都会转换成true]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F02%2F18%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
